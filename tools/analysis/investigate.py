import requests
from web3 import Web3
from eth_utils import decode_hex, function_signature_to_4byte_selector

CONTRACT_ADDRESS = "0xYourContractAddress"
ETHERSCAN_API_KEY = "YourEtherscanAPIKey"

def get_bytecode(contract_address):
    return ''
  #  return '0x608060405234801561000f575f80fd5b506001805f806006811115610027576100266101b6565b5b6006811115610039576100386101b6565b5b81526020019081526020015f2081905550600260015f60016006811115610063576100626101b6565b5b6006811115610075576100746101b6565b5b81526020019081526020015f2081905550600460015f6002600681111561009f5761009e6101b6565b5b60068111156100b1576100b06101b6565b5b81526020019081526020015f2081905550600860015f600360068111156100db576100da6101b6565b5b60068111156100ed576100ec6101b6565b5b81526020019081526020015f2081905550601060015f60046006811115610117576101166101b6565b5b6006811115610129576101286101b6565b5b81526020019081526020015f2081905550602060015f60056006811115610153576101526101b6565b5b6006811115610165576101646101b6565b5b81526020019081526020015f2081905550604060015f60068081111561018e5761018d6101b6565b5b60068111156101a05761019f6101b6565b5b81526020019081526020015f20819055506101e3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6103dc806101f05f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063b7f058361461002d575b5f80fd5b610035610037565b005b5f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100b76003806040518060400160405280600681526020017f30783030303000000000000000000000000000000000000000000000000000008152506100ba565b50565b6100c2610300565b60405180604001604052806100d6866100f1565b81526020016100e5858561012f565b81525090509392505050565b5f60015f83600681111561010857610107610379565b5b600681111561011a57610119610379565b5b81526020019081526020015f20549050919050565b61013761031f565b5f600481111561014a57610149610379565b5b83600481111561015d5761015c610379565b5b03610177576001815f0190151590811515815250506102fa565b6001600481111561018b5761018a610379565b5b83600481111561019e5761019d610379565b5b036101ff575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102f9565b6002600481111561021357610212610379565b5b83600481111561022657610225610379565b5b03610239578181604001819052506102f8565b6003600481111561024d5761024c610379565b5b8360048111156102605761025f610379565b5b03610273578181606001819052506102f7565b60048081111561028657610285610379565b5b83600481111561029957610298610379565b5b036102f6575f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b5b5b5b92915050565b60405180604001604052805f815260200161031961031f565b81525090565b6040518060a001604052805f151581526020015f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea2646970667358221220df90d93acd651c33edc2c0097eb35f4fc2327ed45655ed5d41c1a946af6cc13b64736f6c63430008190033'
TARGET_ADDRESS = "0x167"
def opcode_to_human(opcode):
    return Web3.toText(bytes([opcode]))
def check_address_call(instructions, target_address):
    target_address_hex = target_address.lower()
    bytecode_str = "".join(format(x, "02x") for _, x in instructions)

    call_opcodes = ['f1', 'f2', 'f4', 'fa']
    for i in range(len(instructions) - 20):
        if instructions[i][1] in [int(op, 16) for op in call_opcodes]:
            potential_address = bytecode_str[i*2:(i*2) + 40]
            print(potential_address)
            if potential_address.endswith(target_address_hex):
                return True
    return False

def disassemble_bytecode(bytecode):
    bytecode_bytes = decode_hex(bytecode)
    instructions = []
    i = 0
    while i < len(bytecode_bytes):
        opcode = bytecode_bytes[i]
        instructions.append((i, opcode))
        i += 1
    return instructions
def check_function_call(instructions, method_id):
    method_id_hex = decode_hex(method_id)
    for index, opcode in instructions:
     #   print('---------')
     #   print(instructions[index:index + 4])
     #   print(list(method_id_hex))
     #   print('---------')
        if instructions[index:index + 4] == list(method_id_hex):
            return True
    return False

def main():
    bytecode = get_bytecode(CONTRACT_ADDRESS)
    print(f"Bytecode: {bytecode}")
    instructions = disassemble_bytecode(bytecode)
    print(f"Disassembled instructions: {instructions}")
    function_signature = "getTokenKey(address,uint256)"
    method_id = function_signature_to_4byte_selector(function_signature).hex()
    print(f"Method ID for {function_signature}: {method_id}")
    is_called = check_address_call(instructions, TARGET_ADDRESS)
    if is_called:
        print(f"The address {TARGET_ADDRESS} is called in the contract.")
    else:
        print(f"The address {TARGET_ADDRESS} is NOT called in the contract.")
    is_present = check_function_call(instructions, method_id)
    if is_present:
        print(f"The function {function_signature} is called in the contract.")
    else:
        print(f"The function {function_signature} is NOT called in the contract.")

if __name__ == "__main__":
    main()
